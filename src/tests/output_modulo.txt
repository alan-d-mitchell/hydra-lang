=== HYDRA LANGUAGE COMPILER ===
Compiling file: src/tests/modulo.hydra
File size: 670 bytes

=== PHASE 1: LEXICAL ANALYSIS (TOKENIZING) ===
✅ Tokenization successful!
Tokens found: 136

Debug: All tokens:
    0: Token { token_type: Global, lexeme: "global", line: 1, column: 1 }
    1: Token { token_type: Const, lexeme: "const", line: 1, column: 8 }
    2: Token { token_type: IntType, lexeme: "int", line: 1, column: 14 }
    3: Token { token_type: Identifier("DIVISOR"), lexeme: "DIVISOR", line: 1, column: 18 }
    4: Token { token_type: Assign, lexeme: "=", line: 1, column: 26 }
    5: Token { token_type: IntLiteral(3), lexeme: "3", line: 1, column: 28 }
    6: Token { token_type: Semicolon, lexeme: ";", line: 1, column: 29 }
    7: Token { token_type: Newline, lexeme: "\n", line: 1, column: 31 }
    8: Token { token_type: Newline, lexeme: "\n", line: 2, column: 1 }
    9: Token { token_type: Func, lexeme: "func", line: 3, column: 0 }
   10: Token { token_type: Identifier("testModulo"), lexeme: "testModulo", line: 3, column: 5 }
   11: Token { token_type: LeftParen, lexeme: "(", line: 3, column: 15 }
   12: Token { token_type: IntType, lexeme: "int", line: 3, column: 16 }
   13: Token { token_type: Identifier("x"), lexeme: "x", line: 3, column: 20 }
   14: Token { token_type: Comma, lexeme: ",", line: 3, column: 21 }
   15: Token { token_type: IntType, lexeme: "int", line: 3, column: 23 }
   16: Token { token_type: Identifier("y"), lexeme: "y", line: 3, column: 27 }
   17: Token { token_type: RightParen, lexeme: ")", line: 3, column: 28 }
   18: Token { token_type: Arrow, lexeme: "->", line: 3, column: 30 }
   19: Token { token_type: IntType, lexeme: "int", line: 3, column: 33 }
   20: Token { token_type: LeftBrace, lexeme: "{", line: 3, column: 37 }
   21: Token { token_type: Newline, lexeme: "\n", line: 3, column: 39 }
   22: Token { token_type: IntType, lexeme: "int", line: 4, column: 4 }
   23: Token { token_type: Identifier("remainder"), lexeme: "remainder", line: 4, column: 8 }
   24: Token { token_type: Assign, lexeme: "=", line: 4, column: 18 }
   25: Token { token_type: Identifier("x"), lexeme: "x", line: 4, column: 20 }
   26: Token { token_type: Modulo, lexeme: "%", line: 4, column: 22 }
   27: Token { token_type: Identifier("y"), lexeme: "y", line: 4, column: 24 }
   28: Token { token_type: Semicolon, lexeme: ";", line: 4, column: 25 }
   29: Token { token_type: Newline, lexeme: "\n", line: 4, column: 27 }
   30: Token { token_type: Return, lexeme: "return", line: 5, column: 4 }
   31: Token { token_type: Identifier("remainder"), lexeme: "remainder", line: 5, column: 11 }
   32: Token { token_type: Semicolon, lexeme: ";", line: 5, column: 20 }
   33: Token { token_type: Newline, lexeme: "\n", line: 5, column: 22 }
   34: Token { token_type: RightBrace, lexeme: "}", line: 6, column: 0 }
   35: Token { token_type: Newline, lexeme: "\n", line: 6, column: 2 }
   36: Token { token_type: Newline, lexeme: "\n", line: 7, column: 1 }
   37: Token { token_type: Func, lexeme: "func", line: 8, column: 0 }
   38: Token { token_type: Identifier("checkEvenOdd"), lexeme: "checkEvenOdd", line: 8, column: 5 }
   39: Token { token_type: LeftParen, lexeme: "(", line: 8, column: 17 }
   40: Token { token_type: IntType, lexeme: "int", line: 8, column: 18 }
   41: Token { token_type: Identifier("number"), lexeme: "number", line: 8, column: 22 }
   42: Token { token_type: RightParen, lexeme: ")", line: 8, column: 28 }
   43: Token { token_type: Arrow, lexeme: "->", line: 8, column: 30 }
   44: Token { token_type: BooleanType, lexeme: "boolean", line: 8, column: 33 }
   45: Token { token_type: LeftBrace, lexeme: "{", line: 8, column: 41 }
   46: Token { token_type: Newline, lexeme: "\n", line: 8, column: 43 }
   47: Token { token_type: Return, lexeme: "return", line: 9, column: 4 }
   48: Token { token_type: Identifier("number"), lexeme: "number", line: 9, column: 11 }
   49: Token { token_type: Modulo, lexeme: "%", line: 9, column: 18 }
   50: Token { token_type: IntLiteral(2), lexeme: "2", line: 9, column: 20 }
   51: Token { token_type: Equal, lexeme: "==", line: 9, column: 22 }
   52: Token { token_type: IntLiteral(0), lexeme: "0", line: 9, column: 25 }
   53: Token { token_type: Semicolon, lexeme: ";", line: 9, column: 26 }
   54: Token { token_type: Newline, lexeme: "\n", line: 9, column: 28 }
   55: Token { token_type: RightBrace, lexeme: "}", line: 10, column: 0 }
   56: Token { token_type: Newline, lexeme: "\n", line: 10, column: 2 }
   57: Token { token_type: Newline, lexeme: "\n", line: 11, column: 1 }
   58: Token { token_type: Func, lexeme: "func", line: 12, column: 0 }
   59: Token { token_type: Identifier("main"), lexeme: "main", line: 12, column: 5 }
   60: Token { token_type: LeftParen, lexeme: "(", line: 12, column: 9 }
   61: Token { token_type: RightParen, lexeme: ")", line: 12, column: 10 }
   62: Token { token_type: Arrow, lexeme: "->", line: 12, column: 12 }
   63: Token { token_type: VoidType, lexeme: "void", line: 12, column: 15 }
   64: Token { token_type: LeftBrace, lexeme: "{", line: 12, column: 20 }
   65: Token { token_type: Newline, lexeme: "\n", line: 12, column: 22 }
   66: Token { token_type: IntType, lexeme: "int", line: 13, column: 4 }
   67: Token { token_type: Identifier("a"), lexeme: "a", line: 13, column: 8 }
   68: Token { token_type: Assign, lexeme: "=", line: 13, column: 10 }
   69: Token { token_type: IntLiteral(17), lexeme: "17", line: 13, column: 12 }
   70: Token { token_type: Semicolon, lexeme: ";", line: 13, column: 14 }
   71: Token { token_type: Newline, lexeme: "\n", line: 13, column: 16 }
   72: Token { token_type: IntType, lexeme: "int", line: 14, column: 4 }
   73: Token { token_type: Identifier("b"), lexeme: "b", line: 14, column: 8 }
   74: Token { token_type: Assign, lexeme: "=", line: 14, column: 10 }
   75: Token { token_type: IntLiteral(5), lexeme: "5", line: 14, column: 12 }
   76: Token { token_type: Semicolon, lexeme: ";", line: 14, column: 13 }
   77: Token { token_type: Newline, lexeme: "\n", line: 14, column: 15 }
   78: Token { token_type: Newline, lexeme: "\n", line: 15, column: 5 }
   79: Token { token_type: IntType, lexeme: "int", line: 16, column: 4 }
   80: Token { token_type: Identifier("result"), lexeme: "result", line: 16, column: 8 }
   81: Token { token_type: Assign, lexeme: "=", line: 16, column: 15 }
   82: Token { token_type: Identifier("a"), lexeme: "a", line: 16, column: 17 }
   83: Token { token_type: Modulo, lexeme: "%", line: 16, column: 19 }
   84: Token { token_type: Identifier("b"), lexeme: "b", line: 16, column: 21 }
   85: Token { token_type: Semicolon, lexeme: ";", line: 16, column: 22 }
   86: Token { token_type: Newline, lexeme: "\n", line: 16, column: 40 }
   87: Token { token_type: IntType, lexeme: "int", line: 17, column: 4 }
   88: Token { token_type: Identifier("funcResult"), lexeme: "funcResult", line: 17, column: 8 }
   89: Token { token_type: Assign, lexeme: "=", line: 17, column: 19 }
   90: Token { token_type: Identifier("testModulo"), lexeme: "testModulo", line: 17, column: 21 }
   91: Token { token_type: LeftParen, lexeme: "(", line: 17, column: 31 }
   92: Token { token_type: IntLiteral(20), lexeme: "20", line: 17, column: 32 }
   93: Token { token_type: Comma, lexeme: ",", line: 17, column: 34 }
   94: Token { token_type: IntLiteral(6), lexeme: "6", line: 17, column: 36 }
   95: Token { token_type: RightParen, lexeme: ")", line: 17, column: 37 }
   96: Token { token_type: Semicolon, lexeme: ";", line: 17, column: 38 }
   97: Token { token_type: Newline, lexeme: "\n", line: 17, column: 56 }
   98: Token { token_type: Newline, lexeme: "\n", line: 18, column: 5 }
   99: Token { token_type: BooleanType, lexeme: "boolean", line: 19, column: 4 }
  100: Token { token_type: Identifier("isEven"), lexeme: "isEven", line: 19, column: 12 }
  101: Token { token_type: Assign, lexeme: "=", line: 19, column: 19 }
  102: Token { token_type: Identifier("checkEvenOdd"), lexeme: "checkEvenOdd", line: 19, column: 21 }
  103: Token { token_type: LeftParen, lexeme: "(", line: 19, column: 33 }
  104: Token { token_type: IntLiteral(10), lexeme: "10", line: 19, column: 34 }
  105: Token { token_type: RightParen, lexeme: ")", line: 19, column: 36 }
  106: Token { token_type: Semicolon, lexeme: ";", line: 19, column: 37 }
  107: Token { token_type: Newline, lexeme: "\n", line: 19, column: 58 }
  108: Token { token_type: BooleanType, lexeme: "boolean", line: 20, column: 4 }
  109: Token { token_type: Identifier("isOdd"), lexeme: "isOdd", line: 20, column: 12 }
  110: Token { token_type: Assign, lexeme: "=", line: 20, column: 18 }
  111: Token { token_type: Identifier("checkEvenOdd"), lexeme: "checkEvenOdd", line: 20, column: 20 }
  112: Token { token_type: LeftParen, lexeme: "(", line: 20, column: 32 }
  113: Token { token_type: IntLiteral(7), lexeme: "7", line: 20, column: 33 }
  114: Token { token_type: RightParen, lexeme: ")", line: 20, column: 34 }
  115: Token { token_type: Semicolon, lexeme: ";", line: 20, column: 35 }
  116: Token { token_type: Newline, lexeme: "\n", line: 20, column: 59 }
  117: Token { token_type: Newline, lexeme: "\n", line: 21, column: 5 }
  118: Token { token_type: Newline, lexeme: "\n", line: 22, column: 44 }
  119: Token { token_type: Identifier("a"), lexeme: "a", line: 23, column: 4 }
  120: Token { token_type: ModuloAssign, lexeme: "%=", line: 23, column: 6 }
  121: Token { token_type: IntLiteral(3), lexeme: "3", line: 23, column: 9 }
  122: Token { token_type: Semicolon, lexeme: ";", line: 23, column: 10 }
  123: Token { token_type: Newline, lexeme: "\n", line: 23, column: 37 }
  124: Token { token_type: Newline, lexeme: "\n", line: 24, column: 5 }
  125: Token { token_type: Newline, lexeme: "\n", line: 25, column: 33 }
  126: Token { token_type: IntType, lexeme: "int", line: 26, column: 4 }
  127: Token { token_type: Identifier("globalMod"), lexeme: "globalMod", line: 26, column: 8 }
  128: Token { token_type: Assign, lexeme: "=", line: 26, column: 18 }
  129: Token { token_type: Identifier("a"), lexeme: "a", line: 26, column: 20 }
  130: Token { token_type: Modulo, lexeme: "%", line: 26, column: 22 }
  131: Token { token_type: Identifier("DIVISOR"), lexeme: "DIVISOR", line: 26, column: 24 }
  132: Token { token_type: Semicolon, lexeme: ";", line: 26, column: 31 }
  133: Token { token_type: Newline, lexeme: "\n", line: 26, column: 47 }
  134: Token { token_type: RightBrace, lexeme: "}", line: 27, column: 0 }
  135: Token { token_type: Eof, lexeme: "", line: 27, column: 1 }

=== PHASE 2: SYNTAX ANALYSIS (PARSING) ===
✅ Parsing successful!
Program structure:
  Functions: 3
  Global variables: 1

=== ABSTRACT SYNTAX TREE (AST) SUMMARY ===
  1. Global variable const int DIVISOR (initialized)
  2. Function 'testModulo' -> int
     Parameters: 2
       1: int x
       2: int y
     Statements in body: 2
     Statement breakdown:
       Return statements: 1
       Variable declarations: 1
  3. Function 'checkEvenOdd' -> boolean
     Parameters: 1
       1: int number
     Statements in body: 1
     Statement breakdown:
       Return statements: 1
  4. Function 'main' -> void
     Parameters: 0
     Statements in body: 8
     Statement breakdown:
       Variable declarations: 7
       Expression statements: 1

=== PHASE 3: SEMANTIC ANALYSIS & TYPE CHECKING ===
✅ Semantic analysis and type checking successful!
   - All symbols properly declared and referenced
   - All types are compatible
   - Control flow statements are valid

=== FULL AST (VERBOSE) ===
Program {
    items: [
        GlobalVariable(
            GlobalVariable {
                is_const: true,
                var_type: Int,
                name: "DIVISOR",
                initializer: Some(
                    Literal(
                        Int(
                            3,
                        ),
                    ),
                ),
            },
        ),
        Function(
            Function {
                name: "testModulo",
                parameters: [
                    Parameter {
                        name: "x",
                        param_type: Int,
                    },
                    Parameter {
                        name: "y",
                        param_type: Int,
                    },
                ],
                return_type: Int,
                body: Block {
                    statements: [
                        VarDecl(
                            VarDecl {
                                is_const: false,
                                var_type: Int,
                                name: "remainder",
                                initializer: Some(
                                    Binary(
                                        BinaryExpr {
                                            left: Identifier(
                                                "x",
                                            ),
                                            operator: Mod,
                                            right: Identifier(
                                                "y",
                                            ),
                                        },
                                    ),
                                ),
                            },
                        ),
                        Return(
                            ReturnStmt {
                                value: Some(
                                    Identifier(
                                        "remainder",
                                    ),
                                ),
                            },
                        ),
                    ],
                },
            },
        ),
        Function(
            Function {
                name: "checkEvenOdd",
                parameters: [
                    Parameter {
                        name: "number",
                        param_type: Int,
                    },
                ],
                return_type: Boolean,
                body: Block {
                    statements: [
                        Return(
                            ReturnStmt {
                                value: Some(
                                    Binary(
                                        BinaryExpr {
                                            left: Binary(
                                                BinaryExpr {
                                                    left: Identifier(
                                                        "number",
                                                    ),
                                                    operator: Mod,
                                                    right: Literal(
                                                        Int(
                                                            2,
                                                        ),
                                                    ),
                                                },
                                            ),
                                            operator: Equal,
                                            right: Literal(
                                                Int(
                                                    0,
                                                ),
                                            ),
                                        },
                                    ),
                                ),
                            },
                        ),
                    ],
                },
            },
        ),
        Function(
            Function {
                name: "main",
                parameters: [],
                return_type: Void,
                body: Block {
                    statements: [
                        VarDecl(
                            VarDecl {
                                is_const: false,
                                var_type: Int,
                                name: "a",
                                initializer: Some(
                                    Literal(
                                        Int(
                                            17,
                                        ),
                                    ),
                                ),
                            },
                        ),
                        VarDecl(
                            VarDecl {
                                is_const: false,
                                var_type: Int,
                                name: "b",
                                initializer: Some(
                                    Literal(
                                        Int(
                                            5,
                                        ),
                                    ),
                                ),
                            },
                        ),
                        VarDecl(
                            VarDecl {
                                is_const: false,
                                var_type: Int,
                                name: "result",
                                initializer: Some(
                                    Binary(
                                        BinaryExpr {
                                            left: Identifier(
                                                "a",
                                            ),
                                            operator: Mod,
                                            right: Identifier(
                                                "b",
                                            ),
                                        },
                                    ),
                                ),
                            },
                        ),
                        VarDecl(
                            VarDecl {
                                is_const: false,
                                var_type: Int,
                                name: "funcResult",
                                initializer: Some(
                                    FunctionCall(
                                        FunctionCallExpr {
                                            name: "testModulo",
                                            arguments: [
                                                Literal(
                                                    Int(
                                                        20,
                                                    ),
                                                ),
                                                Literal(
                                                    Int(
                                                        6,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                            },
                        ),
                        VarDecl(
                            VarDecl {
                                is_const: false,
                                var_type: Boolean,
                                name: "isEven",
                                initializer: Some(
                                    FunctionCall(
                                        FunctionCallExpr {
                                            name: "checkEvenOdd",
                                            arguments: [
                                                Literal(
                                                    Int(
                                                        10,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                            },
                        ),
                        VarDecl(
                            VarDecl {
                                is_const: false,
                                var_type: Boolean,
                                name: "isOdd",
                                initializer: Some(
                                    FunctionCall(
                                        FunctionCallExpr {
                                            name: "checkEvenOdd",
                                            arguments: [
                                                Literal(
                                                    Int(
                                                        7,
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                            },
                        ),
                        Expression(
                            Binary(
                                BinaryExpr {
                                    left: Identifier(
                                        "a",
                                    ),
                                    operator: ModAssign,
                                    right: Literal(
                                        Int(
                                            3,
                                        ),
                                    ),
                                },
                            ),
                        ),
                        VarDecl(
                            VarDecl {
                                is_const: false,
                                var_type: Int,
                                name: "globalMod",
                                initializer: Some(
                                    Binary(
                                        BinaryExpr {
                                            left: Identifier(
                                                "a",
                                            ),
                                            operator: Mod,
                                            right: Identifier(
                                                "DIVISOR",
                                            ),
                                        },
                                    ),
                                ),
                            },
                        ),
                    ],
                },
            },
        ),
    ],
}

=== COMPILATION COMPLETE ===
🎉 File 'src/tests/modulo.hydra' compiled successfully!

All compilation phases completed:
   ✅ Lexical Analysis
   ✅ Syntax Analysis
   ✅ Semantic Analysis
   ✅ Type Checking

Next phases (not yet implemented):
   ⏳ Code Generation
   ⏳ Optimization
   ⏳ Linking

Tip: Set environment variables for more output:
  HYDRA_DEBUG=1   - Show all tokens
  HYDRA_VERBOSE=1 - Show full AST
