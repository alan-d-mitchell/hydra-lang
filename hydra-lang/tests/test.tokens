Token { token_type: Newline, lexeme: "\n", line: 1, column: 48 }
Token { token_type: Newline, lexeme: "\n", line: 2, column: 0 }
Token { token_type: Let, lexeme: "let", line: 3, column: 0 }
Token { token_type: Identifier("int_val"), lexeme: "int_val", line: 3, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 3, column: 11 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 3, column: 13 }
Token { token_type: Assign, lexeme: "=", line: 3, column: 17 }
Token { token_type: IntLiteral(42), lexeme: "42", line: 3, column: 19 }
Token { token_type: Semicolon, lexeme: ";", line: 3, column: 21 }
Token { token_type: Newline, lexeme: "\n", line: 3, column: 22 }
Token { token_type: Let, lexeme: "let", line: 4, column: 0 }
Token { token_type: Identifier("long_val"), lexeme: "long_val", line: 4, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 4, column: 12 }
Token { token_type: Identifier("i64"), lexeme: "i64", line: 4, column: 14 }
Token { token_type: Assign, lexeme: "=", line: 4, column: 18 }
Token { token_type: IntLiteral(1000000000000), lexeme: "1000000000000", line: 4, column: 20 }
Token { token_type: Semicolon, lexeme: ";", line: 4, column: 33 }
Token { token_type: Newline, lexeme: "\n", line: 4, column: 34 }
Token { token_type: Let, lexeme: "let", line: 5, column: 0 }
Token { token_type: Identifier("short_float"), lexeme: "short_float", line: 5, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 5, column: 15 }
Token { token_type: Identifier("f32"), lexeme: "f32", line: 5, column: 17 }
Token { token_type: Assign, lexeme: "=", line: 5, column: 21 }
Token { token_type: FloatLiteral(3.14), lexeme: "3.14", line: 5, column: 23 }
Token { token_type: Semicolon, lexeme: ";", line: 5, column: 27 }
Token { token_type: Newline, lexeme: "\n", line: 5, column: 28 }
Token { token_type: Let, lexeme: "let", line: 6, column: 0 }
Token { token_type: Identifier("long_float"), lexeme: "long_float", line: 6, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 6, column: 14 }
Token { token_type: Identifier("f64"), lexeme: "f64", line: 6, column: 16 }
Token { token_type: Assign, lexeme: "=", line: 6, column: 20 }
Token { token_type: FloatLiteral(2.7182818284), lexeme: "2.7182818284", line: 6, column: 22 }
Token { token_type: Semicolon, lexeme: ";", line: 6, column: 34 }
Token { token_type: Newline, lexeme: "\n", line: 6, column: 35 }
Token { token_type: Let, lexeme: "let", line: 7, column: 0 }
Token { token_type: Identifier("letter"), lexeme: "letter", line: 7, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 7, column: 10 }
Token { token_type: Identifier("char"), lexeme: "char", line: 7, column: 12 }
Token { token_type: Assign, lexeme: "=", line: 7, column: 17 }
Token { token_type: CharLiteral('X'), lexeme: "'X'", line: 7, column: 19 }
Token { token_type: Semicolon, lexeme: ";", line: 7, column: 22 }
Token { token_type: Newline, lexeme: "\n", line: 7, column: 23 }
Token { token_type: Let, lexeme: "let", line: 8, column: 0 }
Token { token_type: Identifier("greeting"), lexeme: "greeting", line: 8, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 8, column: 12 }
Token { token_type: Identifier("string"), lexeme: "string", line: 8, column: 14 }
Token { token_type: Assign, lexeme: "=", line: 8, column: 21 }
Token { token_type: StringLiteral("Welcome to Hydra!"), lexeme: "\"Welcome to Hydra!\"", line: 8, column: 23 }
Token { token_type: Semicolon, lexeme: ";", line: 8, column: 42 }
Token { token_type: Newline, lexeme: "\n", line: 8, column: 43 }
Token { token_type: Let, lexeme: "let", line: 9, column: 0 }
Token { token_type: Identifier("flag"), lexeme: "flag", line: 9, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 9, column: 8 }
Token { token_type: Identifier("boolean"), lexeme: "boolean", line: 9, column: 10 }
Token { token_type: Assign, lexeme: "=", line: 9, column: 18 }
Token { token_type: BoolLiteral(true), lexeme: "true", line: 9, column: 20 }
Token { token_type: Semicolon, lexeme: ";", line: 9, column: 24 }
Token { token_type: Newline, lexeme: "\n", line: 9, column: 25 }
Token { token_type: Let, lexeme: "let", line: 10, column: 0 }
Token { token_type: Identifier("nothing"), lexeme: "nothing", line: 10, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 10, column: 11 }
Token { token_type: Identifier("void"), lexeme: "void", line: 10, column: 13 }
Token { token_type: Assign, lexeme: "=", line: 10, column: 18 }
Token { token_type: Null, lexeme: "null", line: 10, column: 20 }
Token { token_type: Semicolon, lexeme: ";", line: 10, column: 24 }
Token { token_type: Newline, lexeme: "\n", line: 10, column: 73 }
Token { token_type: Let, lexeme: "let", line: 11, column: 0 }
Token { token_type: Identifier("s"), lexeme: "s", line: 11, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 11, column: 5 }
Token { token_type: Identifier("struct"), lexeme: "struct", line: 11, column: 7 }
Token { token_type: Assign, lexeme: "=", line: 11, column: 14 }
Token { token_type: Null, lexeme: "null", line: 11, column: 16 }
Token { token_type: Semicolon, lexeme: ";", line: 11, column: 20 }
Token { token_type: Newline, lexeme: "\n", line: 11, column: 56 }
Token { token_type: Newline, lexeme: "\n", line: 12, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 13, column: 46 }
Token { token_type: Let, lexeme: "let", line: 14, column: 0 }
Token { token_type: Identifier("no_type"), lexeme: "no_type", line: 14, column: 4 }
Token { token_type: Assign, lexeme: "=", line: 14, column: 12 }
Token { token_type: IntLiteral(10), lexeme: "10", line: 14, column: 14 }
Token { token_type: Semicolon, lexeme: ";", line: 14, column: 16 }
Token { token_type: Newline, lexeme: "\n", line: 14, column: 17 }
Token { token_type: Newline, lexeme: "\n", line: 15, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 16, column: 21 }
Token { token_type: Let, lexeme: "let", line: 17, column: 0 }
Token { token_type: Identifier("nums"), lexeme: "nums", line: 17, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 17, column: 8 }
Token { token_type: LeftBracket, lexeme: "[", line: 17, column: 10 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 17, column: 11 }
Token { token_type: Comma, lexeme: ",", line: 17, column: 14 }
Token { token_type: IntLiteral(5), lexeme: "5", line: 17, column: 16 }
Token { token_type: RightBracket, lexeme: "]", line: 17, column: 17 }
Token { token_type: Assign, lexeme: "=", line: 17, column: 19 }
Token { token_type: LeftBrace, lexeme: "{", line: 17, column: 21 }
Token { token_type: IntLiteral(1), lexeme: "1", line: 17, column: 22 }
Token { token_type: Comma, lexeme: ",", line: 17, column: 23 }
Token { token_type: IntLiteral(2), lexeme: "2", line: 17, column: 25 }
Token { token_type: Comma, lexeme: ",", line: 17, column: 26 }
Token { token_type: IntLiteral(3), lexeme: "3", line: 17, column: 28 }
Token { token_type: Comma, lexeme: ",", line: 17, column: 29 }
Token { token_type: IntLiteral(4), lexeme: "4", line: 17, column: 31 }
Token { token_type: Comma, lexeme: ",", line: 17, column: 32 }
Token { token_type: IntLiteral(5), lexeme: "5", line: 17, column: 34 }
Token { token_type: RightBrace, lexeme: "}", line: 17, column: 35 }
Token { token_type: Semicolon, lexeme: ";", line: 17, column: 36 }
Token { token_type: Newline, lexeme: "\n", line: 17, column: 37 }
Token { token_type: Let, lexeme: "let", line: 18, column: 0 }
Token { token_type: Identifier("flags"), lexeme: "flags", line: 18, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 18, column: 9 }
Token { token_type: LeftBracket, lexeme: "[", line: 18, column: 11 }
Token { token_type: Identifier("boolean"), lexeme: "boolean", line: 18, column: 12 }
Token { token_type: Comma, lexeme: ",", line: 18, column: 19 }
Token { token_type: IntLiteral(3), lexeme: "3", line: 18, column: 21 }
Token { token_type: RightBracket, lexeme: "]", line: 18, column: 22 }
Token { token_type: Assign, lexeme: "=", line: 18, column: 24 }
Token { token_type: LeftBrace, lexeme: "{", line: 18, column: 26 }
Token { token_type: BoolLiteral(true), lexeme: "true", line: 18, column: 27 }
Token { token_type: Comma, lexeme: ",", line: 18, column: 31 }
Token { token_type: BoolLiteral(false), lexeme: "false", line: 18, column: 33 }
Token { token_type: Comma, lexeme: ",", line: 18, column: 38 }
Token { token_type: BoolLiteral(true), lexeme: "true", line: 18, column: 40 }
Token { token_type: RightBrace, lexeme: "}", line: 18, column: 44 }
Token { token_type: Semicolon, lexeme: ";", line: 18, column: 45 }
Token { token_type: Newline, lexeme: "\n", line: 18, column: 46 }
Token { token_type: Let, lexeme: "let", line: 19, column: 0 }
Token { token_type: Identifier("chars"), lexeme: "chars", line: 19, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 19, column: 9 }
Token { token_type: LeftBracket, lexeme: "[", line: 19, column: 11 }
Token { token_type: Identifier("char"), lexeme: "char", line: 19, column: 12 }
Token { token_type: Comma, lexeme: ",", line: 19, column: 16 }
Token { token_type: IntLiteral(6), lexeme: "6", line: 19, column: 18 }
Token { token_type: RightBracket, lexeme: "]", line: 19, column: 19 }
Token { token_type: Assign, lexeme: "=", line: 19, column: 21 }
Token { token_type: LeftBrace, lexeme: "{", line: 19, column: 23 }
Token { token_type: CharLiteral('H'), lexeme: "'H'", line: 19, column: 24 }
Token { token_type: Comma, lexeme: ",", line: 19, column: 27 }
Token { token_type: CharLiteral('y'), lexeme: "'y'", line: 19, column: 29 }
Token { token_type: Comma, lexeme: ",", line: 19, column: 32 }
Token { token_type: CharLiteral('d'), lexeme: "'d'", line: 19, column: 34 }
Token { token_type: Comma, lexeme: ",", line: 19, column: 37 }
Token { token_type: CharLiteral('r'), lexeme: "'r'", line: 19, column: 39 }
Token { token_type: Comma, lexeme: ",", line: 19, column: 42 }
Token { token_type: CharLiteral('a'), lexeme: "'a'", line: 19, column: 44 }
Token { token_type: Comma, lexeme: ",", line: 19, column: 47 }
Token { token_type: CharLiteral('\n'), lexeme: "'\\n'", line: 19, column: 49 }
Token { token_type: RightBrace, lexeme: "}", line: 19, column: 53 }
Token { token_type: Semicolon, lexeme: ";", line: 19, column: 54 }
Token { token_type: Newline, lexeme: "\n", line: 19, column: 55 }
Token { token_type: Let, lexeme: "let", line: 20, column: 0 }
Token { token_type: Identifier("empty"), lexeme: "empty", line: 20, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 20, column: 9 }
Token { token_type: LeftBracket, lexeme: "[", line: 20, column: 11 }
Token { token_type: Identifier("i64"), lexeme: "i64", line: 20, column: 12 }
Token { token_type: Comma, lexeme: ",", line: 20, column: 15 }
Token { token_type: IntLiteral(10), lexeme: "10", line: 20, column: 17 }
Token { token_type: RightBracket, lexeme: "]", line: 20, column: 19 }
Token { token_type: Assign, lexeme: "=", line: 20, column: 21 }
Token { token_type: LeftBrace, lexeme: "{", line: 20, column: 23 }
Token { token_type: RightBrace, lexeme: "}", line: 20, column: 24 }
Token { token_type: Semicolon, lexeme: ";", line: 20, column: 25 }
Token { token_type: Newline, lexeme: "\n", line: 20, column: 58 }
Token { token_type: Newline, lexeme: "\n", line: 21, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 22, column: 24 }
Token { token_type: Function, lexeme: "fn", line: 23, column: 0 }
Token { token_type: Identifier("add"), lexeme: "add", line: 23, column: 3 }
Token { token_type: LeftParen, lexeme: "(", line: 23, column: 6 }
Token { token_type: Identifier("a"), lexeme: "a", line: 23, column: 7 }
Token { token_type: Colon, lexeme: ":", line: 23, column: 8 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 23, column: 10 }
Token { token_type: Comma, lexeme: ",", line: 23, column: 13 }
Token { token_type: Identifier("b"), lexeme: "b", line: 23, column: 15 }
Token { token_type: Colon, lexeme: ":", line: 23, column: 16 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 23, column: 18 }
Token { token_type: RightParen, lexeme: ")", line: 23, column: 21 }
Token { token_type: Minus, lexeme: "-", line: 23, column: 23 }
Token { token_type: RightAngle, lexeme: ">", line: 23, column: 24 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 23, column: 26 }
Token { token_type: LeftBrace, lexeme: "{", line: 23, column: 30 }
Token { token_type: Newline, lexeme: "\n", line: 23, column: 31 }
Token { token_type: Return, lexeme: "return", line: 24, column: 4 }
Token { token_type: Identifier("a"), lexeme: "a", line: 24, column: 11 }
Token { token_type: Plus, lexeme: "+", line: 24, column: 13 }
Token { token_type: Identifier("b"), lexeme: "b", line: 24, column: 15 }
Token { token_type: Semicolon, lexeme: ";", line: 24, column: 16 }
Token { token_type: Newline, lexeme: "\n", line: 24, column: 17 }
Token { token_type: RightBrace, lexeme: "}", line: 25, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 25, column: 1 }
Token { token_type: Newline, lexeme: "\n", line: 26, column: 0 }
Token { token_type: Function, lexeme: "fn", line: 27, column: 0 }
Token { token_type: Identifier("bad_add"), lexeme: "bad_add", line: 27, column: 3 }
Token { token_type: LeftParen, lexeme: "(", line: 27, column: 10 }
Token { token_type: Identifier("a"), lexeme: "a", line: 27, column: 11 }
Token { token_type: Colon, lexeme: ":", line: 27, column: 12 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 27, column: 14 }
Token { token_type: Comma, lexeme: ",", line: 27, column: 17 }
Token { token_type: Identifier("b"), lexeme: "b", line: 27, column: 19 }
Token { token_type: Colon, lexeme: ":", line: 27, column: 20 }
Token { token_type: Identifier("i64"), lexeme: "i64", line: 27, column: 22 }
Token { token_type: RightParen, lexeme: ")", line: 27, column: 25 }
Token { token_type: Minus, lexeme: "-", line: 27, column: 27 }
Token { token_type: RightAngle, lexeme: ">", line: 27, column: 28 }
Token { token_type: Identifier("i64"), lexeme: "i64", line: 27, column: 30 }
Token { token_type: LeftBrace, lexeme: "{", line: 27, column: 34 }
Token { token_type: Newline, lexeme: "\n", line: 27, column: 35 }
Token { token_type: Return, lexeme: "return", line: 28, column: 4 }
Token { token_type: Identifier("a"), lexeme: "a", line: 28, column: 11 }
Token { token_type: Plus, lexeme: "+", line: 28, column: 13 }
Token { token_type: Identifier("b"), lexeme: "b", line: 28, column: 15 }
Token { token_type: Semicolon, lexeme: ";", line: 28, column: 16 }
Token { token_type: Newline, lexeme: "\n", line: 28, column: 63 }
Token { token_type: RightBrace, lexeme: "}", line: 29, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 29, column: 1 }
Token { token_type: Newline, lexeme: "\n", line: 30, column: 0 }
Token { token_type: Function, lexeme: "fn", line: 31, column: 0 }
Token { token_type: Identifier("greet"), lexeme: "greet", line: 31, column: 3 }
Token { token_type: LeftParen, lexeme: "(", line: 31, column: 8 }
Token { token_type: Identifier("name"), lexeme: "name", line: 31, column: 9 }
Token { token_type: Colon, lexeme: ":", line: 31, column: 13 }
Token { token_type: Identifier("string"), lexeme: "string", line: 31, column: 15 }
Token { token_type: RightParen, lexeme: ")", line: 31, column: 21 }
Token { token_type: Minus, lexeme: "-", line: 31, column: 23 }
Token { token_type: RightAngle, lexeme: ">", line: 31, column: 24 }
Token { token_type: Identifier("void"), lexeme: "void", line: 31, column: 26 }
Token { token_type: LeftBrace, lexeme: "{", line: 31, column: 31 }
Token { token_type: Newline, lexeme: "\n", line: 31, column: 32 }
Token { token_type: Identifier("println"), lexeme: "println", line: 32, column: 4 }
Token { token_type: LeftParen, lexeme: "(", line: 32, column: 11 }
Token { token_type: StringLiteral("Hello, "), lexeme: "\"Hello, \"", line: 32, column: 12 }
Token { token_type: Plus, lexeme: "+", line: 32, column: 22 }
Token { token_type: Identifier("name"), lexeme: "name", line: 32, column: 24 }
Token { token_type: RightParen, lexeme: ")", line: 32, column: 28 }
Token { token_type: Semicolon, lexeme: ";", line: 32, column: 29 }
Token { token_type: Newline, lexeme: "\n", line: 32, column: 30 }
Token { token_type: RightBrace, lexeme: "}", line: 33, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 33, column: 1 }
Token { token_type: Newline, lexeme: "\n", line: 34, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 35, column: 23 }
Token { token_type: Identifier("struct"), lexeme: "struct", line: 36, column: 0 }
Token { token_type: Identifier("Node"), lexeme: "Node", line: 36, column: 7 }
Token { token_type: LeftAngle, lexeme: "<", line: 36, column: 11 }
Token { token_type: Identifier("T"), lexeme: "T", line: 36, column: 12 }
Token { token_type: RightAngle, lexeme: ">", line: 36, column: 13 }
Token { token_type: LeftBrace, lexeme: "{", line: 36, column: 15 }
Token { token_type: Newline, lexeme: "\n", line: 36, column: 16 }
Token { token_type: Let, lexeme: "let", line: 37, column: 4 }
Token { token_type: Identifier("value"), lexeme: "value", line: 37, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 37, column: 13 }
Token { token_type: Identifier("T"), lexeme: "T", line: 37, column: 15 }
Token { token_type: Semicolon, lexeme: ";", line: 37, column: 16 }
Token { token_type: Newline, lexeme: "\n", line: 37, column: 17 }
Token { token_type: Let, lexeme: "let", line: 38, column: 4 }
Token { token_type: Identifier("next"), lexeme: "next", line: 38, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 38, column: 12 }
Token { token_type: Reference, lexeme: "&", line: 38, column: 14 }
Token { token_type: Identifier("Node"), lexeme: "Node", line: 38, column: 15 }
Token { token_type: LeftAngle, lexeme: "<", line: 38, column: 19 }
Token { token_type: Identifier("T"), lexeme: "T", line: 38, column: 20 }
Token { token_type: RightAngle, lexeme: ">", line: 38, column: 21 }
Token { token_type: Optional, lexeme: "?", line: 38, column: 22 }
Token { token_type: Semicolon, lexeme: ";", line: 38, column: 23 }
Token { token_type: Newline, lexeme: "\n", line: 38, column: 24 }
Token { token_type: RightBrace, lexeme: "}", line: 39, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 39, column: 1 }
Token { token_type: Newline, lexeme: "\n", line: 40, column: 0 }
Token { token_type: Identifier("struct"), lexeme: "struct", line: 41, column: 0 }
Token { token_type: Identifier("Wrapper"), lexeme: "Wrapper", line: 41, column: 7 }
Token { token_type: LeftAngle, lexeme: "<", line: 41, column: 14 }
Token { token_type: Identifier("U"), lexeme: "U", line: 41, column: 15 }
Token { token_type: RightAngle, lexeme: ">", line: 41, column: 16 }
Token { token_type: LeftBrace, lexeme: "{", line: 41, column: 18 }
Token { token_type: Newline, lexeme: "\n", line: 41, column: 19 }
Token { token_type: Let, lexeme: "let", line: 42, column: 4 }
Token { token_type: Identifier("item"), lexeme: "item", line: 42, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 42, column: 12 }
Token { token_type: Identifier("U"), lexeme: "U", line: 42, column: 14 }
Token { token_type: Semicolon, lexeme: ";", line: 42, column: 15 }
Token { token_type: Newline, lexeme: "\n", line: 42, column: 16 }
Token { token_type: RightBrace, lexeme: "}", line: 43, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 43, column: 1 }
Token { token_type: Newline, lexeme: "\n", line: 44, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 45, column: 15 }
Token { token_type: Function, lexeme: "fn", line: 46, column: 0 }
Token { token_type: Identifier("main"), lexeme: "main", line: 46, column: 3 }
Token { token_type: LeftParen, lexeme: "(", line: 46, column: 7 }
Token { token_type: RightParen, lexeme: ")", line: 46, column: 8 }
Token { token_type: Minus, lexeme: "-", line: 46, column: 10 }
Token { token_type: RightAngle, lexeme: ">", line: 46, column: 11 }
Token { token_type: Identifier("void"), lexeme: "void", line: 46, column: 13 }
Token { token_type: LeftBrace, lexeme: "{", line: 46, column: 18 }
Token { token_type: Newline, lexeme: "\n", line: 46, column: 19 }
Token { token_type: Let, lexeme: "let", line: 47, column: 4 }
Token { token_type: Identifier("head"), lexeme: "head", line: 47, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 47, column: 12 }
Token { token_type: Identifier("Node"), lexeme: "Node", line: 47, column: 14 }
Token { token_type: LeftAngle, lexeme: "<", line: 47, column: 18 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 47, column: 19 }
Token { token_type: RightAngle, lexeme: ">", line: 47, column: 22 }
Token { token_type: Assign, lexeme: "=", line: 47, column: 24 }
Token { token_type: Identifier("Node"), lexeme: "Node", line: 47, column: 26 }
Token { token_type: LeftAngle, lexeme: "<", line: 47, column: 30 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 47, column: 31 }
Token { token_type: RightAngle, lexeme: ">", line: 47, column: 34 }
Token { token_type: LeftBrace, lexeme: "{", line: 47, column: 36 }
Token { token_type: Newline, lexeme: "\n", line: 47, column: 37 }
Token { token_type: Identifier("value"), lexeme: "value", line: 48, column: 8 }
Token { token_type: Assign, lexeme: "=", line: 48, column: 14 }
Token { token_type: IntLiteral(5), lexeme: "5", line: 48, column: 16 }
Token { token_type: Semicolon, lexeme: ";", line: 48, column: 17 }
Token { token_type: Newline, lexeme: "\n", line: 48, column: 18 }
Token { token_type: Identifier("next"), lexeme: "next", line: 49, column: 8 }
Token { token_type: Assign, lexeme: "=", line: 49, column: 13 }
Token { token_type: Null, lexeme: "null", line: 49, column: 15 }
Token { token_type: Semicolon, lexeme: ";", line: 49, column: 19 }
Token { token_type: Newline, lexeme: "\n", line: 49, column: 20 }
Token { token_type: RightBrace, lexeme: "}", line: 50, column: 4 }
Token { token_type: Semicolon, lexeme: ";", line: 50, column: 5 }
Token { token_type: Newline, lexeme: "\n", line: 50, column: 6 }
Token { token_type: Newline, lexeme: "\n", line: 51, column: 0 }
Token { token_type: Let, lexeme: "let", line: 52, column: 4 }
Token { token_type: Identifier("wrapped"), lexeme: "wrapped", line: 52, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 52, column: 15 }
Token { token_type: Identifier("Wrapper"), lexeme: "Wrapper", line: 52, column: 17 }
Token { token_type: LeftAngle, lexeme: "<", line: 52, column: 24 }
Token { token_type: Identifier("string"), lexeme: "string", line: 52, column: 25 }
Token { token_type: RightAngle, lexeme: ">", line: 52, column: 31 }
Token { token_type: Assign, lexeme: "=", line: 52, column: 33 }
Token { token_type: Identifier("Wrapper"), lexeme: "Wrapper", line: 52, column: 35 }
Token { token_type: LeftAngle, lexeme: "<", line: 52, column: 42 }
Token { token_type: Identifier("string"), lexeme: "string", line: 52, column: 43 }
Token { token_type: RightAngle, lexeme: ">", line: 52, column: 49 }
Token { token_type: LeftBrace, lexeme: "{", line: 52, column: 51 }
Token { token_type: Newline, lexeme: "\n", line: 52, column: 52 }
Token { token_type: Identifier("item"), lexeme: "item", line: 53, column: 8 }
Token { token_type: Assign, lexeme: "=", line: 53, column: 13 }
Token { token_type: StringLiteral("content"), lexeme: "\"content\"", line: 53, column: 15 }
Token { token_type: Semicolon, lexeme: ";", line: 53, column: 24 }
Token { token_type: Newline, lexeme: "\n", line: 53, column: 25 }
Token { token_type: RightBrace, lexeme: "}", line: 54, column: 4 }
Token { token_type: Semicolon, lexeme: ";", line: 54, column: 5 }
Token { token_type: Newline, lexeme: "\n", line: 54, column: 6 }
Token { token_type: Newline, lexeme: "\n", line: 55, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 56, column: 23 }
Token { token_type: For, lexeme: "for", line: 57, column: 4 }
Token { token_type: LeftParen, lexeme: "(", line: 57, column: 8 }
Token { token_type: Identifier("i"), lexeme: "i", line: 57, column: 9 }
Token { token_type: Colon, lexeme: ":", line: 57, column: 10 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 57, column: 12 }
Token { token_type: Assign, lexeme: "=", line: 57, column: 16 }
Token { token_type: IntLiteral(0), lexeme: "0", line: 57, column: 18 }
Token { token_type: Semicolon, lexeme: ";", line: 57, column: 19 }
Token { token_type: Identifier("i"), lexeme: "i", line: 57, column: 21 }
Token { token_type: LeftAngle, lexeme: "<", line: 57, column: 23 }
Token { token_type: IntLiteral(5), lexeme: "5", line: 57, column: 25 }
Token { token_type: Semicolon, lexeme: ";", line: 57, column: 26 }
Token { token_type: Identifier("i"), lexeme: "i", line: 57, column: 28 }
Token { token_type: Increment, lexeme: "++", line: 57, column: 29 }
Token { token_type: RightParen, lexeme: ")", line: 57, column: 31 }
Token { token_type: LeftBrace, lexeme: "{", line: 57, column: 33 }
Token { token_type: Newline, lexeme: "\n", line: 57, column: 34 }
Token { token_type: Identifier("println"), lexeme: "println", line: 58, column: 8 }
Token { token_type: LeftParen, lexeme: "(", line: 58, column: 15 }
Token { token_type: Identifier("i"), lexeme: "i", line: 58, column: 16 }
Token { token_type: RightParen, lexeme: ")", line: 58, column: 17 }
Token { token_type: Semicolon, lexeme: ";", line: 58, column: 18 }
Token { token_type: Newline, lexeme: "\n", line: 58, column: 19 }
Token { token_type: RightBrace, lexeme: "}", line: 59, column: 4 }
Token { token_type: Newline, lexeme: "\n", line: 59, column: 5 }
Token { token_type: Newline, lexeme: "\n", line: 60, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 61, column: 19 }
Token { token_type: Let, lexeme: "let", line: 62, column: 4 }
Token { token_type: Identifier("names"), lexeme: "names", line: 62, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 62, column: 13 }
Token { token_type: LeftBracket, lexeme: "[", line: 62, column: 15 }
Token { token_type: Identifier("string"), lexeme: "string", line: 62, column: 16 }
Token { token_type: Comma, lexeme: ",", line: 62, column: 22 }
Token { token_type: IntLiteral(3), lexeme: "3", line: 62, column: 24 }
Token { token_type: RightBracket, lexeme: "]", line: 62, column: 25 }
Token { token_type: Assign, lexeme: "=", line: 62, column: 27 }
Token { token_type: LeftBrace, lexeme: "{", line: 62, column: 29 }
Token { token_type: StringLiteral("Alice"), lexeme: "\"Alice\"", line: 62, column: 30 }
Token { token_type: Comma, lexeme: ",", line: 62, column: 37 }
Token { token_type: StringLiteral("Bob"), lexeme: "\"Bob\"", line: 62, column: 39 }
Token { token_type: Comma, lexeme: ",", line: 62, column: 44 }
Token { token_type: StringLiteral("Carol"), lexeme: "\"Carol\"", line: 62, column: 46 }
Token { token_type: RightBrace, lexeme: "}", line: 62, column: 53 }
Token { token_type: Semicolon, lexeme: ";", line: 62, column: 54 }
Token { token_type: Newline, lexeme: "\n", line: 62, column: 55 }
Token { token_type: ForEach, lexeme: "forEach", line: 63, column: 4 }
Token { token_type: LeftParen, lexeme: "(", line: 63, column: 12 }
Token { token_type: Identifier("name"), lexeme: "name", line: 63, column: 13 }
Token { token_type: Colon, lexeme: ":", line: 63, column: 17 }
Token { token_type: Identifier("string"), lexeme: "string", line: 63, column: 19 }
Token { token_type: In, lexeme: "in", line: 63, column: 26 }
Token { token_type: Identifier("names"), lexeme: "names", line: 63, column: 29 }
Token { token_type: RightParen, lexeme: ")", line: 63, column: 34 }
Token { token_type: LeftBrace, lexeme: "{", line: 63, column: 36 }
Token { token_type: Newline, lexeme: "\n", line: 63, column: 37 }
Token { token_type: Identifier("println"), lexeme: "println", line: 64, column: 8 }
Token { token_type: LeftParen, lexeme: "(", line: 64, column: 15 }
Token { token_type: Identifier("name"), lexeme: "name", line: 64, column: 16 }
Token { token_type: RightParen, lexeme: ")", line: 64, column: 20 }
Token { token_type: Semicolon, lexeme: ";", line: 64, column: 21 }
Token { token_type: Newline, lexeme: "\n", line: 64, column: 22 }
Token { token_type: RightBrace, lexeme: "}", line: 65, column: 4 }
Token { token_type: Newline, lexeme: "\n", line: 65, column: 5 }
Token { token_type: Newline, lexeme: "\n", line: 66, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 67, column: 20 }
Token { token_type: If, lexeme: "if", line: 68, column: 4 }
Token { token_type: LeftParen, lexeme: "(", line: 68, column: 7 }
Token { token_type: Identifier("head"), lexeme: "head", line: 68, column: 8 }
Token { token_type: Dot, lexeme: ".", line: 68, column: 12 }
Token { token_type: Identifier("value"), lexeme: "value", line: 68, column: 13 }
Token { token_type: Equal, lexeme: "==", line: 68, column: 19 }
Token { token_type: IntLiteral(5), lexeme: "5", line: 68, column: 22 }
Token { token_type: RightParen, lexeme: ")", line: 68, column: 23 }
Token { token_type: LeftBrace, lexeme: "{", line: 68, column: 25 }
Token { token_type: Newline, lexeme: "\n", line: 68, column: 26 }
Token { token_type: Identifier("println"), lexeme: "println", line: 69, column: 8 }
Token { token_type: LeftParen, lexeme: "(", line: 69, column: 15 }
Token { token_type: StringLiteral("Head value is 5"), lexeme: "\"Head value is 5\"", line: 69, column: 16 }
Token { token_type: RightParen, lexeme: ")", line: 69, column: 33 }
Token { token_type: Semicolon, lexeme: ";", line: 69, column: 34 }
Token { token_type: Newline, lexeme: "\n", line: 69, column: 35 }
Token { token_type: RightBrace, lexeme: "}", line: 70, column: 4 }
Token { token_type: Newline, lexeme: "\n", line: 70, column: 5 }
Token { token_type: Newline, lexeme: "\n", line: 71, column: 0 }
Token { token_type: If, lexeme: "if", line: 72, column: 4 }
Token { token_type: Identifier("flag"), lexeme: "flag", line: 72, column: 7 }
Token { token_type: LeftBrace, lexeme: "{", line: 72, column: 12 }
Token { token_type: Newline, lexeme: "\n", line: 72, column: 13 }
Token { token_type: Identifier("println"), lexeme: "println", line: 73, column: 8 }
Token { token_type: LeftParen, lexeme: "(", line: 73, column: 15 }
Token { token_type: StringLiteral("Flag is true"), lexeme: "\"Flag is true\"", line: 73, column: 16 }
Token { token_type: RightParen, lexeme: ")", line: 73, column: 30 }
Token { token_type: Semicolon, lexeme: ";", line: 73, column: 31 }
Token { token_type: Newline, lexeme: "\n", line: 73, column: 32 }
Token { token_type: RightBrace, lexeme: "}", line: 74, column: 4 }
Token { token_type: Newline, lexeme: "\n", line: 74, column: 5 }
Token { token_type: Newline, lexeme: "\n", line: 75, column: 0 }
Token { token_type: If, lexeme: "if", line: 76, column: 4 }
Token { token_type: LeftParen, lexeme: "(", line: 76, column: 7 }
Token { token_type: Identifier("name"), lexeme: "name", line: 76, column: 8 }
Token { token_type: Is, lexeme: "is", line: 76, column: 13 }
Token { token_type: In, lexeme: "in", line: 76, column: 16 }
Token { token_type: Identifier("names"), lexeme: "names", line: 76, column: 19 }
Token { token_type: RightParen, lexeme: ")", line: 76, column: 24 }
Token { token_type: LeftBrace, lexeme: "{", line: 76, column: 26 }
Token { token_type: Newline, lexeme: "\n", line: 76, column: 27 }
Token { token_type: Identifier("println"), lexeme: "println", line: 77, column: 8 }
Token { token_type: LeftParen, lexeme: "(", line: 77, column: 15 }
Token { token_type: StringLiteral("Name found!"), lexeme: "\"Name found!\"", line: 77, column: 16 }
Token { token_type: RightParen, lexeme: ")", line: 77, column: 29 }
Token { token_type: Semicolon, lexeme: ";", line: 77, column: 30 }
Token { token_type: Newline, lexeme: "\n", line: 77, column: 31 }
Token { token_type: RightBrace, lexeme: "}", line: 78, column: 4 }
Token { token_type: Newline, lexeme: "\n", line: 78, column: 5 }
Token { token_type: Newline, lexeme: "\n", line: 79, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 80, column: 17 }
Token { token_type: Let, lexeme: "let", line: 81, column: 4 }
Token { token_type: Identifier("result"), lexeme: "result", line: 81, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 81, column: 14 }
Token { token_type: Identifier("boolean"), lexeme: "boolean", line: 81, column: 16 }
Token { token_type: Assign, lexeme: "=", line: 81, column: 24 }
Token { token_type: BoolLiteral(true), lexeme: "true", line: 81, column: 26 }
Token { token_type: And, lexeme: "&&", line: 81, column: 31 }
Token { token_type: BoolLiteral(false), lexeme: "false", line: 81, column: 34 }
Token { token_type: Or, lexeme: "||", line: 81, column: 40 }
Token { token_type: BoolLiteral(true), lexeme: "true", line: 81, column: 43 }
Token { token_type: And, lexeme: "&&", line: 81, column: 48 }
Token { token_type: LeftParen, lexeme: "(", line: 81, column: 51 }
Token { token_type: Not, lexeme: "!", line: 81, column: 52 }
Token { token_type: BoolLiteral(false), lexeme: "false", line: 81, column: 53 }
Token { token_type: RightParen, lexeme: ")", line: 81, column: 58 }
Token { token_type: Semicolon, lexeme: ";", line: 81, column: 59 }
Token { token_type: Newline, lexeme: "\n", line: 81, column: 60 }
Token { token_type: Newline, lexeme: "\n", line: 82, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 83, column: 24 }
Token { token_type: Let, lexeme: "let", line: 84, column: 4 }
Token { token_type: Identifier("expr"), lexeme: "expr", line: 84, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 84, column: 12 }
Token { token_type: Identifier("string"), lexeme: "string", line: 84, column: 14 }
Token { token_type: Assign, lexeme: "=", line: 84, column: 21 }
Token { token_type: StringLiteral("(x + y) * (z - 42) / 3.14"), lexeme: "\"(x + y) * (z - 42) / 3.14\"", line: 84, column: 23 }
Token { token_type: Semicolon, lexeme: ";", line: 84, column: 50 }
Token { token_type: Newline, lexeme: "\n", line: 84, column: 51 }
Token { token_type: Let, lexeme: "let", line: 85, column: 4 }
Token { token_type: Identifier("punct"), lexeme: "punct", line: 85, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 85, column: 13 }
Token { token_type: Identifier("string"), lexeme: "string", line: 85, column: 15 }
Token { token_type: Assign, lexeme: "=", line: 85, column: 22 }
Token { token_type: StringLiteral("{}[]();:<>!=+-*/&&||=="), lexeme: "\"{}[]();:<>!=+-*/&&||==\"", line: 85, column: 24 }
Token { token_type: Semicolon, lexeme: ";", line: 85, column: 48 }
Token { token_type: Newline, lexeme: "\n", line: 85, column: 49 }
Token { token_type: RightBrace, lexeme: "}", line: 86, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 86, column: 1 }
Token { token_type: Newline, lexeme: "\n", line: 87, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 88, column: 25 }
Token { token_type: Newline, lexeme: "\n", line: 94, column: 3 }
Token { token_type: Eof, lexeme: "", line: 95, column: 0 }